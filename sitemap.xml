<search>
    
     <entry>
        <title>MySQL 8.0 新特性解读</title>
        <url>https://bigleon.github.io/post/mysql8.0%E6%96%B0%E7%89%B9%E6%80%A7%E8%A7%A3%E8%AF%BB/</url>
        <categories>
          <category>技术</category>
        </categories>
        <tags>
          <tag>MySQL</tag>
        </tags>
        <content type="html"> MySQL 8.0 新特性解读  MySQL 8.0 2018/4/19 General Availability以来已经发发布了9个小版本。很多公司已经开始使用8.0版本尤其是官方主要精力在8.0版本的新特性和bug修改，8.0的MGR 持续的修复bug 和引入,MGR原生强一致高可用特性对于金融行业对于数据强一致的要是极大的吸引力。 2020/1/13 MySQL 8.0.19 新版本GA了,新年第一个版本。MySQL8.0以来新增新特性将近300个，本文将对新特性进行梳理。把其中重大特性所带来的影响将做一些说明希望不管是开发还是运维能从中找到自己期望的新特性能解决生产中的痛点。预计阅读完本篇文章大约5分钟。
 重点新特性： Hash Join   Mysql一直以来关于表连接只支持block-nested loop 算法。在最新的8.0.18支持了期望已久的Hash Join，对与多表连接中连接字段没有索引的场景下特别适合。这样再也不担心被驱动表连接字段忘记加索引导致线上SQL拖垮整个系统了。
  目前MySQL对Hash Join支持也是有条件的：
   每个连接当中，至少有一个等值连接条件；    在笛卡尔积场景下没有等值条件也会用上hash join      可以global 或者 session 对系统变量optimizer_switch中hash_join = on/off 进行控制（在8.0.19这个小版本已经弃用）
  通过join_buffer_size可以调整hash连接表是否在内存或者落盘实现，这对整个速度会有比较大的影响。
  下面是在mysql8.0中是否启用hash_join的场景下sql的变化。
1. 查看优化器关于hash_join参数默认已经开启 MySQL 192.168.0.52:33060&#43; ssl SQL &amp;gt; show global variables like &amp;#39;%switch%%&amp;#39;\G; *************************** 1. row *************************** Variable_name: optimizer_switch Value: hash_join=on 2. 表结构 CREATE TABLE `t1` ( `c1` int(11) NOT NULL, `c2` int(11) DEFAULT NULL, PRIMARY KEY (`c1`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci CREATE TABLE `t2` ( `c1` int(11) NOT NULL, `c2` int(11) DEFAULT NULL, PRIMARY KEY (`c1`) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci MySQL 192.168.0.52:33060&#43; ssl mgrtest SQL &amp;gt; select count(*) from t1; &#43;----------&#43;  | count(*) | &#43;----------&#43;  | 7215 | &#43;----------&#43;  MySQL 192.168.0.52:33060&#43; ssl mgrtest SQL &amp;gt; select count(*) from t2; &#43;----------&#43;  | count(*) | &#43;----------&#43;  | 7215 | &#43;----------&#43;  3. 查看表t1/t2用无索引的列c2做关联 MySQL 192.168.0.52:33060&#43; ssl mgrtest SQL &amp;gt; explain format=tree select count(*) from t1 join t2 on t1.c2 = t2.c2 ; &#43;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#43;  | EXPLAIN | &#43;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#43;  | -&amp;gt; Aggregate: count(0) -&amp;gt; Inner hash join (t2.c2 = t1.c2) (cost=5206351.53 rows=5205623) -&amp;gt; Table scan on t2 (cost=0.01 rows=7215) -&amp;gt; Hash -&amp;gt; Table scan on t1 (cost=725.25 rows=7215) | &#43;----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------&#43;  1 row in set (0.0009 sec) 4. 使用hash_join执行速度 MySQL 192.168.0.52:33060&#43; ssl mgrtest SQL &amp;gt; select count(*) from t1 join t2 on t1.c2 = t2.c2 ; &#43;----------&#43;  | count(*) | &#43;----------&#43;  | 7215 | &#43;----------&#43;  1 row in set (0.0045 sec) 5. 关掉hash join功能 MySQL 192.168.0.52:33060&#43; ssl mgrtest SQL &amp;gt; show variables like &amp;#39;%switch%&amp;#39;; | Variable_name | Value | optimizer_switch | hash_join=off | MySQL 192.168.0.52:33060&#43; ssl mgrtest SQL &amp;gt; explain format=tree select count(*) from t1 join t2 on t1.c2 = t2.c2 ; &#43;----------------------------------------&#43;  | EXPLAIN | &#43;----------------------------------------&#43;  | &amp;lt;not executable by iterator executor&amp;gt; | &#43;----------------------------------------&#43;  1 row in set (0.0010 sec) --未使用hash_join功能执行同一条sql的速度  MySQL 192.168.0.52:33060&#43; ssl mgrtest SQL &amp;gt; select count(*) from t1 join t2 on t1.c2 = t2.c2 ; &#43;----------&#43;  | count(*) | &#43;----------&#43;  | 7215 | &#43;----------&#43;  1 row in set (2.2888 sec) 6. 两者速度差了508倍，由此可见hash_join功能强大 MySQL 192.168.0.52:33060&#43; ssl mgrtest SQL &amp;gt; select 2.2888/0.0045; &#43;---------------&#43;  | 2.2888/0.0045 | &#43;---------------&#43;  | 508.62222222 | &#43;---------------&#43;  1 row in set (0.0005 sec)     Clone Plugin   从8.0.17 官方引入了一个重量级功能克隆插件，可以对当前实例进行数据克隆到本地或者远程。这是官方提供的原生的物理备份功能其原理类似percona公司的物理备份工具xtrabackup。这对于数据库运维将是极大的解放，增加从库或者MGR添加节点只需要执行几条命令就可以了。对于自动化平台的开发降低难度，将不再关心搭建从库的细节。
  本地数据克隆，生成在指定目录下
  远程数据克隆，数据源实例被称为Recipient ，数据接收实例被称为Donor。
  数据远程克隆主要流程
 Init阶段: 开启备份锁，阻止DDL操作 File Copy ：对数据文件进行copy，copy文件前开启page tracking功能，记录此时checkpoint的lsn作为起始lsn。 Page Copy ：在数据文件copy完成后，开始redo 归档获取当前checkpoint的lsn，同时停掉page copy。page copy 是会将开始拷贝数据文件之后所有page的修改的page发送到Donor。 Redo Copy ：停掉redo 归档，把所有日志传到Donor端获取binlog的gtid信息。 Done    克隆数据目前的一些限制：
 在clone过程中会block DDL操作 作为Donor数据接收者数据库版本必须一致 clone不能复制配置文件 目前只支持innodb表，sys库用其他引擎的表将不会被复制。 需要重启节点，并不保证任何情况下可以重启。    JSON functions using multi-valued indexes   在mysql8.0.17新版本开始支持json数组多值索引。正如名字现在支持对文档属性支持对多个值创建索引，极大增强mysql的nosql特性。根据官方资料，多值索引属于函数索引在引擎层通过虚拟列实现的。这个特性的出现可以在使用mongodb之类的文档数据库的，可以考虑使用mysql减少技术学习成本。
  下面展示多值索引的使用方式：
下面展示多值索引的使用方式： CREATE TABLE customers_1 ( id BIGINT NOT NULL AUTO_INCREMENT PRIMARY KEY, modified DATETIME DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP, custinfo JSON ); -- 对cusinfo列中zipcode属性添加多值索引 ALTER TABLE customers ADD INDEX zips( (CAST(custinfo-&amp;gt;&amp;#39;$.zipcode&amp;#39; AS UNSIGNED ARRAY)) ); INSERT INTO customers VALUES (NULL, NOW(), &amp;#39;{&amp;#34;user&amp;#34;:&amp;#34;Jack&amp;#34;,&amp;#34;user_id&amp;#34;:37,&amp;#34;zipcode&amp;#34;:[94582,94536]}&amp;#39;), (NULL, NOW(), &amp;#39;{&amp;#34;user&amp;#34;:&amp;#34;Jill&amp;#34;,&amp;#34;user_id&amp;#34;:22,&amp;#34;zipcode&amp;#34;:[94568,94507,94582]}&amp;#39;), (NULL, NOW(), &amp;#39;{&amp;#34;user&amp;#34;:&amp;#34;Bob&amp;#34;,&amp;#34;user_id&amp;#34;:31,&amp;#34;zipcode&amp;#34;:[94477,94507]}&amp;#39;), (NULL, NOW(), &amp;#39;{&amp;#34;user&amp;#34;:&amp;#34;Mary&amp;#34;,&amp;#34;user_id&amp;#34;:72,&amp;#34;zipcode&amp;#34;:[94536]}&amp;#39;), (NULL, NOW(), &amp;#39;{&amp;#34;user&amp;#34;:&amp;#34;Ted&amp;#34;,&amp;#34;user_id&amp;#34;:56,&amp;#34;zipcode&amp;#34;:[94507,94582]}&amp;#39;); -- 使用多值索引需使用MEMBER OF() JSON_CONTAINS() JSON_OVERLAPS()函数 SELECT * FROM customers WHERE JSON_CONTAINS(custinfo-&amp;gt;&amp;#39;$.zipcode&amp;#39;, CAST(&amp;#39;[94507,94582]&amp;#39; AS JSON));   MYSQL Shell Enhancements  mysql-shell 是mysql 官方提供的一个高级mysql客户端。提供了类似mysql的函数，兼容 js 和 python 脚本。提供X DevAPI 提供了同时操作关系型和文档型数据。AdminAPI 则提供了管理MGR 集群工具，加节点和获取集群信息只需要几条命令即可完成吧。最重要的是当我们从5.7升级8.0 的时候可以使用mysql-shell提供的升级检查工具 util.checkForServerUpgrade() 进行升级检查，很轻松的帮助我们知道目前5.7里哪些是8.0不兼容，可以做处理方便我们平滑升级到8.0。  InnoDB Cluster Enhancements   InnoDB Cluster 是 把 MGR /mysql-shell /mysql-router 三个组件集成在一起，MGR 解决了高可用，mysql-shell 解决了集群配置管理mysql-router 作为failover 接入层。这是一套mysql官方提供的原生高可用管理解决方案。下面是InnoDB Cluster 整体架构图。
  其中最重要的是MGR提供了基于强一致协议的节点数据同步和故障转移。
  mysql-router 轻量级中间件，提供应用程序的连接可用节点实现故障转移
  mysql-shell 可以通过 Admin API 来配置管理Innodb Cluster 进行配置管理
    Replication Enhancements   组复制引入大量消息碎片层，增强了Paxos 引擎单线程消息传递至内核XCom在高并发大消息时线程忙于处理消息而延迟参与故障检测导致增加故障检测器的误报几率
  XCom的消息缓存可通过参数调整，增强更大的消息负载
  组复制节点由于网络瞬断时节点自动在此加入集群
  新增可替换二进制日志密钥的SQL命令，在不停机替换binlog加密密钥
  binlog将携带分区表更改元数据
  引入克隆组件，增强了节点自动恢复，极大方便了MGR节点增加
  其他新特性列举：  重构SQL分析器 （SQLParaser） 行锁增加SKIP LOCKED 和 NOWAIT特性选项 新增事务CATS特性， （Michigan大学提供） 在线修改undo log 数量 直方图 histogram 认证插件由sha256_password改成caching_sha2_password 新增角色ole功能，将权限打包分组二次授权 消除了buffer pool mutex （Percona的贡献） 数据字典全部采用InnoDB引擎储存，支持DDL原子性，crash safe, metadata 管理更完善（可以利用ibd2sdi工具提取metadata） 快速在线加新列（腾讯互娱DBA团队贡献） 并行redo log， 并提供redo log的I/O性能。可在线调整redo log buffer redo日志归档 新增倒序索引，不可见索引， 函数索引 优化器增强，增强CBO特性 支持会话级别SET_VAR动态调整部分参数 自增列持久化 增强JSON性能，功能 新增智能选项 innodb_deficated_server InnoDB memcached 插件支持mget操作 增加redo/undo log加密 增加resource group功能 新增更多数据字典 默认字符集改成了utf8mb4（连接字符集，表字符集） 通用表达式CTE 窗口函数 SET PERSIST Writeset 并行（relay log 阶段可以合并事务做到高效回放） restart功能 （配合clone plugin） 取消QC 备份锁（lock instance for backup） Mysql8.0引入一个：admin_port 默认33062  管理连接相关参数  admin_address Admin_port create_admin_listener_thead = 2      总结：  MySQL 8.0 新特性我只列举一些比较重要的新特性，要是想了解更多可以参考官方文档。从上面文章可以了解到mysql8.0已经时一个全新的版本，新特性增加了很多，也遗弃很多功能。这对于管理员和开发人员来讲都需要好好学习了解。mysql8.0 小版本GA已经9个小版本，处于比较稳定的状态了。尤其是对于MGR的增强也是逐步完善。金融行业数据一致性的要求是各个行业最高的，MGR的强一致的特性是极具吸引力的。正如现在我们引入的mysql管理平台DMP，对mysql8.0 和 mysql8.0 MGR 也是支持的，假如有项目组有这方面需求可以和我们联系。   参考：
https://dev.mysql.com/doc/refman/8.0/en/hash-joins.html
https://mysqlserverteam.com/hash-join-in-mysql-8/
https://dev.mysql.com/worklog/task/?id=9209
https://dev.mysql.com/worklog/task/?id=8763
 </content>
    </entry>
    
</search>